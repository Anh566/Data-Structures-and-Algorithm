#include <iostream>
using namespace std;

// Cấu trúc của một node trong cây AVL
struct Node {
    int key;
    Node* left;
    Node* right;
    int height;
};

// Hàm tính chiều cao của một node
int getHeight(Node* node) {
    if (node == nullptr) return 0;
    return node->height;
}

// Hàm tạo một node mới
Node* createNode(int key) {
    Node* node = new Node();
    node->key = key;
    node->left = nullptr;
    node->right = nullptr;
    node->height = 1; // Chiều cao ban đầu là 1
    return node;
}

// Hàm tính hệ số cân bằng của một node
int getBalance(Node* node) {
    if (node == nullptr) return 0;
    return getHeight(node->left) - getHeight(node->right);
}

// Hàm xoay phải
Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T = x->right;

    // Thực hiện xoay
    x->right = y;
    y->left = T;

    // Cập nhật chiều cao
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;

    return x;
}

// Hàm xoay trái
Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T = y->left;

    // Thực hiện xoay
    y->left = x;
    x->right = T;

    // Cập nhật chiều cao
    x->height = max(getHeight(x->left), getHeight(x->right)) + 1;
    y->height = max(getHeight(y->left), getHeight(y->right)) + 1;

    return y;
}

// Hàm thêm một node mới vào cây AVL
Node* insert(Node* node, int key) {
    if (node == nullptr) return createNode(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node; // Không cho phép trùng lặp

    // Cập nhật chiều cao
    node->height = 1 + max(getHeight(node->left), getHeight(node->right));

    // Kiểm tra cân bằng
    int balance = getBalance(node);

    // Xoay nếu mất cân bằng
    // Trường hợp Left Left
    if (balance > 1 && key < node->left->key)
        return rotateRight(node);

    // Trường hợp Right Right
    if (balance < -1 && key > node->right->key)
        return rotateLeft(node);

    // Trường hợp Left Right
    if (balance > 1 && key > node->left->key) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }

    // Trường hợp Right Left
    if (balance < -1 && key < node->right->key) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }

    return node;
}

// Hàm in cây AVL theo thứ tự duyệt (inorder traversal)
void inorderTraversal(Node* root) {
    if (root != nullptr) {
        inorderTraversal(root->left);
        cout << root->key << " ";
        inorderTraversal(root->right);
    }
}

int main() {
    Node* root = nullptr;

    // Nhập một dãy số (ví dụ)
    int arr[] = {10, 20, 30, 40, 50, 25};
    int n = sizeof(arr) / sizeof(arr[0]);

    for (int i = 0; i < n; i++) {
        root = insert(root, arr[i]);
    }

    // In cây AVL
    cout << "Cây AVL sau khi thêm các phần tử: ";
    inorderTraversal(root);
    cout << endl;

    return 0;
}
